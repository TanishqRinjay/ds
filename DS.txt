// 1
#include <stdio.h>
#include <stdlib.h>
#define SIZE 50
void create(int a[], int n);
void display(int a[], int n);
void main()
{
    int a[SIZE], i, choice, n, ele, pos;
    printf("Enter number of elements in the array:\n");
    scanf("%d", &n);
    for (;;)
    {
        printf("Enter\n1. Create\n2. Display\n3. Exit\n");
        scanf("%d", &choice);
        switch (choice)
        {
        case 2:
            display(a, n);
            break;
        case 1:
            create(a, n);
            break;
        case 3:
            exit(0);
        }
    }
}
void create(int a[], int n)
{
    int i;
    printf("Enter array elements:\n");
    for (i = 0; i < n; i++)
        scanf("%d", &a[i]);
}
void display(int a[], int n)
{
    int i;
    printf("Array elements:\n");
    for (i = 0; i < n; i++)
        printf("%d\t", a[i]);
    printf("\n");
}

// ++++2
#include <stdio.h>
#include <stdlib.h>
#define MAX 10
int *create(int *, int *);
void display(int *, int *);
int *insert1(int *, int *);
int *delete(int *, int *);
void main()
{
    int choice;
    int *n, pos, elem, m;
    int *a;

    while (1)
    {
        printf("\n\n......Menu.....");
        printf("\n 1.Create");
        printf("\n 2.Display");
        printf("\n 3.Insert");
        printf("\n 4.Delete");
        printf("\n 5.Exit");
        printf("\n Enter Your Choice\n");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            a = (int *)malloc(MAX * sizeof(int));
            printf("\nEnter the number of elements: ");
            scanf("%d", &m);
            n = &m;
            a = create(a, n);
            break;

        case 2:
            display(a, n);
            break;
        case 3:
            a = insert1(a, n);
            display(a, n);
            break;
        case 4:
            a = delete (a, n);
            display(a, n);
            break;
        case 5:
            exit(0);
            break;
        default:
            printf("\nPlease enter a valid choice:");
        }
    }
    free(a);
}

int *create(int *a, int *n)

{
    int i;
    printf("\nEnter the elements: ");
    for (i = 0; i < *n; i++)
    {
        scanf("%d", &a[i]);
    }
    return a;
}

void display(int *a, int *n)

{

    int i;

    if (*n == 0)

    {
        printf("\nNo elements to display");
        return;
    }
    printf("\nArray elements are: ");
    for (i = 0; i < *n; i++)
        printf("%d\t ", a[i]);
}

int *insert1(int *a, int *n) 
{
    int i, pos, elem;
    if (*n == MAX)
    {
        printf("array is full");
    }
    else
    {
        do
        {
            printf("\n enter a valid position where element to be inserted\n");
            scanf("%d", &pos);
        } while (pos > *n);
        printf("\n enter the value to be inserted:\n");
        scanf("%d", &elem);
      
        for (i = *n - 1; i >= pos; i--)
        {
            a[i + 1] = a[i];
        }
        a[pos] = elem;
        *n = *n + 1; 
        return a;
    }
}

int *delete(int *a, int *n) 
{
    int i, pos, elem;
    if (*n == 0)
    {
        printf("\n Array is empty & no.of elements to deleted\n");
    }
    else
    {
        do
        {
            printf("\n enter a valid position from element to be deleted\n");
            scanf("%d", &pos);
        } while (pos >= *n);
        elem = a[pos];
        printf("\n deleted element is:%d\n", elem);
      
        for (i = pos; i <= *n - 1; i++)
        {
            a[i] = a[i + 1];
        }
        *n = *n - 1; 
        return a;
    }
}







// 3++++
#include<stdio.h>
#include<stdlib.h>
void push();
void pop();
void display();
#define size 5
struct stack 
{
    int a[size];
    int top;
};
struct stack s;


int main()
{
    s.top=-1;
    int ch;
    while(1)
            {
                printf("Enter the choice\n");
                printf(" 1.Push (Entering)\n 2.Pop (Delete)\n 3.Display \n 4.Exit\n");
                scanf("%d",&ch);
            
                switch(ch)
                {
                    case 1: push();
                            break;
                    case 2: pop();
                            break;
                    case 3: display();
                            break;
                    case 4: exit (0);
                }
    
            }
    return(0);
}

void push()
{
    int item;
    if(s.top==size-1)
    printf("Overflown\n ");
    else 
    {
        printf("Enter an item \n");
        scanf("%d",&item);
        s.a[++s.top]=item;
        
    }
}

void pop()
{
    if(s.top==-1)
    printf("stack underflow\n");
    else
    {
        printf("Item deleted: %d \n",s.a[s.top]);
        s.top--;
        
        
    }
}
void display()
{
    int i;
    if (s.top==-1)
        printf("stack underflow");
    else
        {
            printf("contents of stack\n");
            for(i=s.top;i>=0;i--)
                printf("%d\n",s.a[i]);
        }
}




// 3.o
#include <stdio.h>
#include <stdlib.h>
#define SIZE 20
void push(int ele, int *top, int stack[]);
void pop(int *top, int stack[]);
void display(int top, int stack[]);
int palindrome(int *top, int stack[]);
void main()
{
    int choice, top = -1, ele, flag;
    int stack[SIZE];
    for (;;)
    {
        printf("Enter\n1. Push\n2. Pop\n3. Display\n4. Palindrome\n5. Exit\n");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            if (top == (SIZE - 1))
                printf("Stack overflow!!!\n");
            else
            {
                printf("Enter element to be pushed:\n");
                scanf("%d", &ele);
                push(ele, &top, stack);
            }
            break;
        case 2:
            if (top == -1)
                printf("Stack underflow!!!\n");
            else
                pop(&top, stack);
            break;
        case 3:
            if (top == -1)
                printf("Stack underflow!!!\n");
            else
                display(top, stack);
            break;
        case 4:
            flag = palindrome(&top, stack);
            if (flag == -1)
                printf("Not a palindrome.\n");
            else
                printf("Palindrome.\n");
            break;
        case 5:
            exit(0);
        }
    }
}
void push(int ele, int *top, int stack[])
{
    *top += 1;
    stack[*top] = ele;
}
void pop(int *top, int stack[])
{
    printf("Element to be deleted:\n%d\n", stack[*top]);
    *top -= 1;
}
void display(int top, int stack[])
{
    int i;
    printf("Elements are:\n");
    for (i = top; i >= 0; i--)
        printf("%d\t", stack[i]);
    printf("\n");
}
int palindrome(int *top, int stack[])
{
    int temp[SIZE], i, j, count = 0;
    for (j = 0; *top >= 0; j++)
    {
        temp[j] = stack[(*top)--];
        count += 1;
    }
    for (i = 0; i <= count / 2; i++)
    {
        if (temp[i] != temp[count - i - 1])
            return -1;
    }
    return 1;
}



// 4(a)
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#define MAX 50
int stack[MAX];
char post[MAX];
int top = -1;
void pushstack(int tmp);
void calculator(char c);
void main()
{
    int i;
    printf("Insert a postfix notation :: ");
   
    scanf("%s", post);
    for (i = 0; i < strlen(post); i++)
    {
        if (post[i] >= '0' && post[i] <= '9')
        {
            pushstack(i);
        }
        if (post[i] == '+' || post[i] == '-' || post[i] == '*' || post[i] == '/' || post[i] == '^')
        {
            calculator(post[i]);
        }
    }
    printf("\n\nResult :: %d", stack[top]);
}
void pushstack(int tmp)
{
    top++;
    stack[top] = (int)(post[tmp] - 48);
}
void calculator(char c)
{
    int a, b, ans;
    a = stack[top];
    stack[top] = '\0';
    top--;
    b = stack[top];
    stack[top] = '\0';
    top--;
    switch (c)
    {
    case '+':
        ans = b + a;
        break;
    case '-':
        ans = b - a;
        break;
    case '*':
        ans = b * a;
        break;
    case '/':
        ans = b / a;
        break;
    case '^':
        ans = pow(b, a);
        break;
    default:
        ans = 0;
    }
    top++;
    stack[top] = ans;
    getch();
}



// 4(b)
#include <stdio.h>
#include <stdlib.h>
void TOH(int n, char source, char destination, char spare);
void main()
{
    int n;
    printf("Enter number of rings:\n");
    scanf("%d", &n);
    TOH(n, 'A', 'C', 'B');
}
void TOH(int n, char source, char destination, char spare)
{
    if (n == 1)
        printf("Move from %c to %c\n", source, destination);
    else
    {
        TOH(n - 1, source, spare, destination);
        TOH(1, source, destination, spare);
        TOH(n - 1, spare, destination, source);
    }
}



// 5
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <conio.h>
int count = 0;
struct node
{
    char usn[10], name[10], branch[3];
    int sem, ph;
    struct node *next;
} *first = NULL, *temp = NULL, *temp1 = NULL, *temp2 = NULL;
void create()
{
    int sem, ph;
    char usn[10], name[10], branch[10];
    temp = (struct node *)malloc(sizeof(struct node));
    printf("Enter Student details: \n");
    printf("Enter USN:");
    scanf(" %s", usn);
    printf("Enter Name:");
    scanf("%s", name);
    printf("Enter Branch:");
    scanf("%s", branch);
    printf("ENTER Semester:");
    scanf("%d", &sem);
    printf("ENTER Phone no:");
    scanf("%d", &ph);
    strcpy(temp->usn, usn);
    strcpy(temp->branch, branch);
    strcpy(temp->name, name);
    temp->sem = sem;
    temp->ph = ph;
    temp->next = NULL;
    count++;
}
void insertfront()
{
    create();
    if (first == NULL)
        first = temp;
    else
    {
        temp->next = first;
        first = temp;
    }
}
void insertlast()
{
    create();
    if (first == NULL)
    {
        first = temp;
    }
    else
    {
        temp1 = first;
        while (temp1->next != NULL)
        {
            temp1 = temp1->next;
        }
        temp1->next = temp;
    }
}
void deletefront()
{
    if (first == NULL)
    {
        printf("\nNo nodes in the list\n");
    }
    else
    {
        temp1 = first;
        first = first->next;
        free(temp1);
        count--;
    }
}
void deletelast()
{
    if (first == NULL)
    {
        printf("\nNo nodes in the list\n");
    }
    else
    {
        temp1 = first;
        while (temp1->next != NULL)
        {
            temp2 = temp1;
            temp1 = temp1->next;
        }
        temp2->next = NULL;
        free(temp1);
        count--;
    }
}
void display()
{
    if (first == NULL)
    {
        printf("\nNo nodes to display\n");
    }
    else
    {
        temp1 = first;
        printf("There are %d number of nodes in the list\n ", count);
        printf("Student Details are:\n");
        printf("USN \tNAME \tBRANCH \tSEM \tPHONE NUMBER\n");
        printf("\n-----------------------------------------------------\n");
        while (temp1 != NULL)
        {

            printf("%-3s\t %-10s %-3s\t %-3d %-10d\n", temp1->usn, temp1->name, temp1->branch, temp1->sem, temp1->ph);
            temp1 = temp1->next;
        }
    }
}
void main()
{
    int choice, m, i;
    printf("\n-->MENU<--\n");
    while (1)
    {
        printf("1.Create a SLL\n2.Display the records\n3.Insert at the last\n4.Delete at the last\n5.Insert at the front\n6.Delete at the front\n7.Exit\n");
        printf("Enter ur choice: ");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            printf("\nEnter the number of student record to be created : ");
            scanf("%d", &m);
            for (i = 0; i < m; i++)
            {
                insertfront();
            }
            break;
        case 2:
            display();
            break;
        case 3:
            insertlast();
            break;
        case 4:
            deletelast();
            break;
        case 5:
            insertfront();
            break;
        case 6:
            deletefront();
            break;
        case 7:
            exit(1);
        default:
            printf("Invalid choice \n");
            break;
        }
    }
    _getch();
}



// 6
#include<stdio.h>
#include<stdlib.h> 
#include<string.h>
#include<conio.h>
int count = 0;
struct node
{
	struct node *prev;
	int id, phno;
	float sal;
	char name[20], dept[10], desg[20];
	struct node *next;
}*h, *temp, *temp1, *temp2, *temp4;

void create()
{
	int id, phno;
	float sal;
	char name[20], dept[10], desg[20];
	temp = (struct node *)malloc(sizeof(struct node));
	temp->prev = NULL;
	temp->next = NULL;
	printf("\n Enter id,name,department, designation, salary and phno of professor : ");
	scanf("%d %s %s %s %f %d", &id, name, dept, desg, &sal, &phno);
	temp->id = id;
	strcpy(temp->name, name);
	strcpy(temp->dept, dept);
	strcpy(temp->desg, desg);
	temp->sal = sal;
	temp->phno = phno;
	count++;
}
void insertbeg()
{
	if (h == NULL)
	{
		create();
		h = temp;
		temp1 = h;
	}
	else
	{
		create();
		temp->next = h;
		h->prev = temp;
		h = temp;
	}
}
void insertend()
{
	if (h == NULL)
	{
		create();
		h = temp;
		temp1 = h;
	}
	else
	{
		create();
		temp1->next = temp;
		temp->prev = temp1;
		temp1 = temp;
	}
}
void displaybeg()
{
	temp2 = h;
	if (temp2 == NULL)
	{
		printf("List empty to display \n");
		return;
	}
	printf("\n Linked list elements from begining : \n");
	while (temp2 != NULL)
	{
		printf("%d %s %s %s %f %d\n", temp2->id, temp2->name, temp2->dept, temp2->desg, temp2->sal, temp2->phno);
		temp2 = temp2->next;
	}
	printf(" No of Professors = %d ", count);
}
int deleteend()
{
	struct node *temp;
	temp = h;
	if (temp->next == NULL)
	{
		free(temp);
		h = NULL;
		return 0;
	}
	else
	{
		temp2 = temp1->prev;
		temp2->next = NULL;
		printf("%d %s %s %s %f %d\n", temp1->id, temp1->name, temp1->dept,
			temp1->desg, temp1->sal, temp1->phno);
		free(temp1);
	}
	count--;
	return 0;
}
int deletebeg()
{
	struct node *temp;
	temp = h;
	if (temp->next == NULL)
	{
		free(temp);
		h = NULL;
	}
	else
	{
		h = h->next;
		printf("%d %s %s %s %f %d", temp->id, temp->name, temp->dept,
			temp->desg, temp->sal, temp->phno);
		free(temp);
	}
	count--;
	return 0;
}
int main()
{
	int ch, n, i;
	h = NULL;
	temp = temp1 = NULL;
	printf("-----------------MENU--------------------\n");
	printf("\n 1 - Create a DLL of n Professors");
	printf("\n 2 - Display from beginning");
	printf("\n 3 - Insert at end");
	printf("\n 4 - delete at end");
	printf("\n 5 - Insert at beg");
	printf("\n 6 - delete at beg");
	printf("\n 7 - exit\n");
	printf("------------------------------------------\n");
	while (1)
	{
		printf("\n Enter choice : ");
		scanf("%d", &ch);
		switch (ch)
		{
		case 1:printf("\n Enter no of Professors : ");
			scanf("%d", &n);
			for (i = 0; i<n; i++)
				insertend();
			break;
		case 2:displaybeg();
			break;
		case 3:insertend();
			break;
		case 4:deleteend();
			break;
		case 5:insertbeg();
			break;
		case 6:deletebeg();
			break;
		case 7: 	exit(1);
		default: printf("wrong choice\n");
		}
	}
}



// 7
#include <stdio.h>
#include <stdlib.h>

struct Node
{
    int key;
    struct Node *left, *right;
};


struct Node *newNode(char k)
{
    struct Node *node = (struct Node *)malloc(sizeof(struct Node));
    node->key = k;
    node->right = node->left = NULL;
    return node;
}


int countNumNodes(struct Node *root)
{
    if (root == NULL)
        return (0);
    return (1 + countNumNodes(root->left) + countNumNodes(root->right));
}


bool checkComplete(struct Node *root, int index, int numberNodes)
{
  
    if (root == NULL)
        return true;

    if (index >= numberNodes)
        return false;

    return (checkComplete(root->left, 2 * index + 1, numberNodes) && checkComplete(root->right, 2 * index + 2, numberNodes));
}

int main()
{
    struct Node *root = NULL;
    root = newNode(1);
    root->left = newNode(2);
    root->right = newNode(3);
    root->left->left = newNode(4);
    root->left->right = newNode(5);
    root->right->left = newNode(6);

    int node_count = countNumNodes(root);
    int index = 0;

    if (checkComplete(root, index, node_count))
        printf("The tree is a complete binary tree\n");
    else
        printf("The tree is not a complete binary tree\n");
}



// 8
# include <stdio.h>
# include <conio.h>
# include <stdlib.h>

	   typedef struct BST {
		   int data;
		   struct BST *lchild, *rchild;
	   } node;

	   void insert(node *, node *);
	   void inorder(node *);
	   void preorder(node *);
	   void postorder(node *);
	   node* search(node *, int);

	   void main() {
		   int choice, n, i;
		   char ans = 'N';
		   int key;
		   node *new_node, *root, *tmp, *parent;
		   node *get_node();
		   parent = NULL;
		   root = NULL;
		   printf("\nProgram For Binary Search Tree ");
		   do {
			   printf("\n1.Create");
			   printf("\n2.Recursive Traversals");
			   printf("\n3.Search");
			   printf("\n4.Exit");
			   printf("\nEnter your choice :");
			   scanf("%d", &choice);

			   switch (choice) {
			   case 1:
				   printf("\n How many nodes you want to enter : ");
				   scanf("%d", &n);
				   printf("\nEnter The %d Elements :  ", n);
				   for (i = 0; i<n; i++)
				   {
					   new_node = get_node();
					   scanf("%d", &new_node->data);

					   if (root == NULL) // Tree is not Created 
						   root = new_node;
					   else
						   insert(root, new_node);
				   }
				   break;

			   case 2:
				   if (root == NULL)
					   printf("Tree Is Not Created");
				   else {
					   printf("\nThe Inorder display : ");
					   inorder(root);
					   printf("\nThe Preorder display : ");
					   preorder(root);
					   printf("\nThe Postorder display : ");
					   postorder(root);
				   }

				   break;

			   case 3:
				   printf("\nEnter Element to be searched :");
				   scanf("%d", &key);

				   tmp = search(root, key);
				   if (tmp)
					   printf("\nThe %d Element is Present", tmp->data);

				   else
					   printf("\n The Key %d is not present in the BST", key);
				   break;

			   default:
				   printf("\n Terminating");
				   exit(0);

			   }
		   } while (choice != 5);
	   }
	   // Get new Node

	   node *get_node() {
		   node *temp;
		   temp = (node *)malloc(sizeof(node));
		   temp->lchild = NULL;
		   temp->rchild = NULL;
		   return temp;
	   }
	   // This function is for creating a binary search tree

	   void insert(node *root, node *new_node)
	   {
		   if (new_node->data < root->data)
		   {
			   if (root->lchild == NULL)
				   root->lchild = new_node;
			   else
				   insert(root->lchild, new_node);
		   }

		   if (new_node->data > root->data)
		   {
			   if (root->rchild == NULL)
				   root->rchild = new_node;
			   else
				   insert(root->rchild, new_node);
		   }
	   }
	   // This function is for searching the node from binary Search Tree

	   node *search(node *root, int key)
	   {
		   node *temp;
		   temp = root;
		   if (root == NULL)
		   {
			   printf("\n BST is Empty ");
			   return root;
		   }
		   while (temp != NULL)
		   {
			   if (temp->data == key)
				   return temp;
			   if (key < temp->data)
				   temp = temp->lchild;
			   else
				   temp = temp->rchild;
		   }
		   return NULL;
	   }
	   // This function displays the tree in inorder fashion

	   void inorder(node *temp) {
		   if (temp != NULL) {
			   inorder(temp->lchild);
			   printf("%d , ", temp->data);
			   inorder(temp->rchild);
		   }
	   }
	   // This function displays the tree in preorder fashion

	   void preorder(node *temp) {
		   if (temp != NULL) {
			   printf("%d , ", temp->data);
			   preorder(temp->lchild);
			   preorder(temp->rchild);
		   }
	   }

	   // This function displays the tree in postorder fashion
	   void postorder(node *temp) {
		   if (temp != NULL) {
			   postorder(temp->lchild);
			   postorder(temp->rchild);
			   printf("%d , ", temp->data);
		   }
	   }



// 9
#include<stdlib.h>
#include<stdio.h>
#include<conio.h>
void bfs(int v);
void dfs(int v);

int a[50][50], n, visited[50];
int q[20], front = -1, rear = -1;
int s[20], top = -1, count = 0;

void creategraph()
{
	int i, j;
	printf("\nEnter the number of vertices in graph:  ");
	scanf("%d", &n);
	printf("\nEnter the adjacency matrix:\n");
	for (i = 1; i <= n; i++)
		for (j = 1; j <= n; j++)
			scanf("%d", &a[i][j]);
}

void bfs(int v)
{
	int i, cur;
	visited[v] = 1;
	q[++rear] = v;
	printf("\nNodes reachable from starting vertex %d are: ", v);
	while (front != rear)
	{
		cur = q[++front];
		for (i = 1; i <= n; i++)
		{
			if ((a[cur][i] == 1) && (visited[i] == 0))
			{
				q[++rear] = i;

				visited[i] = 1;
				printf("%d ", i);
			}
		}
	}
}

void dfs(int v)
{
	int i;
	visited[v] = 1;
	s[++top] = v;
	for (i = 1; i <= n; i++)
	{
		if (a[v][i] == 1 && visited[i] == 0)
		{
			dfs(i);
			count++;
		}
	}
}

int main()
{
	int ch, start, i, j;
	creategraph();
	printf("\n\n~~~Menu~~~~");
	printf("\n==>1. BFS: Print all nodes reachable from a given starting node");
	printf("\n==>2. DFS: Print all nodes reachable from a given starting node");
	printf("\n==>3:Exit");
	printf("\nEnter your choice: ");
	scanf("%d", &ch);
	switch (ch)
	{
	case 1:            
            for (i = 1; i <= n; i++)
		visited[i] = 0;
		printf("\nEnter the starting vertex: ");
		scanf("%d", &start);
		bfs(start);
		for (i = 1; i <= n; i++)
		{
			if (visited[i] == 0)
				printf("\nThe vertex that is not reachable is %d", i);
		}
		break;
	case 2:             
            for (i = 1; i <= n; i++)
		visited[i] = 0;
		printf("\n Enter the starting vertex:\t");
		scanf("%d", &start);
		dfs(start);
		printf("\nNodes reachable from starting vertex %d are:\n", start);
		for (i = 1; i <= count; i++)
			printf("%d\t", s[i]);
		break;
	case 3: return 0;
	default: printf("\nPlease enter valid choice:");
	}
	getch();
}

