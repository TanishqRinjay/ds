5(A)

import re
#Function Definition For Is Number is True or False


def isphonenumber(numStr):
    if len(numStr) != 12:
        return False
    for i in range(len(numStr)):
        if i == 3 or i == 7:
            if numStr[i] != "-":
                return False
        else:
            if numStr[i].isdigit() == False:
                return False
        return True

        # function Definition For Check The Phone Number


def chkphonenumber(numStr):
        ph_no_pattern = re.compile(r'^\d{3}-\d{3}-\d{4}$')
        if ph_no_pattern.match(numStr):
            return True
        else:
            return False


ph_num = input("Enter a phone number : ")
# without Using Regular Expressions
print("Without using Regular Expression")
if isphonenumber(ph_num):
    print("Valid phone number")
else:
    print("Invalid phone number")
    # using Regular Expressions
print("Using Regular Expression")
if chkphonenumber(ph_num):
    print("Valid phone number")
else:
    print("invalid ")

5(b)....................................................

import re
# Define the regular expression for phone numbers
phone_regex = re.compile(r'\+\d{12}')
email_regex = re.compile(r'[A-Za-z0-9._]+@[A-Za-z0-9]+\.[A-Z|a-z]{2,}')
# Open the file for reading
with open('example.txt', 'r') as f:
# Loop through each line in the file
    for line in f:
        matches = phone_regex.findall(line)
        for match in matches:
            print(match)
        matches = email_regex.findall(line)
        # Print any matches found
        for match in matches:
            print

6(a)...........................................................

import os.path
import sys
fname = input("Enter the filename : ")
if not os.path.isfile(fname):
    print("File", fname, "doesn't exists")
    sys.exit(0)
infile = open(fname, "r")
lineList = infile.readlines()
for i in range(20):
    print(i + 1, ":", lineList[i])
word = input("Enter a word : ")
cnt = 0
for line in lineList:
    cnt += line.count(word)
print("The word", word, "appears", cnt, "times in the file")

6(b)........................................................

import os
import sys
import pathlib
import zipfile
dirName = input("Enter Directory name that you want to backup :")
if not os.path.isdir(dirName):
    print("Directory", dirName, "doesn't exists")
    sys.exit(0)
curDirectory = pathlib.Path(dirName)
with zipfile.ZipFile("myZip.zip", mode="w") as archive:
    for file_path in curDirectory.rglob("*"):
     archive.write(file_path,
        arcname=file_path.relative_to(curDirectory))
if os.path.isfile("myZip.zip"):
    print("Archive", "myZip.zip", "created successfully")
else:
    print("Error in creating zip archive")

7(a)..........................................................

import math
class Shape:
    def __init__(self):
        self.area = 0
        self.name = ""
    def showArea(self):
        print("The area of the", self.name, "is", self.area, "units")

class Circle(Shape):
    def __init__(self, radius):

        self.area = 0

        self.name = "Circle"
        self.radius = radius

    def calcArea(self):
        self.area = math.pi * self.radius * self.radius

class Rectangle(Shape):
    def __init__(self, length, breadth):

        self.area = 0

        self.name = "Rectangle"
        self.length = length
        self.breadth = breadth

    def calcArea(self):
        self.area = self.length * self.breadth
class Triangle(Shape):
    def __init__(self, base, height):
        self.area = 0
        self.name = "Triangle"
        self.base = base
        self.height = height

    def calcArea(self):
        self.area = self.base * self.height / 2
c1 = Circle(5)
c1.calcArea()
c1.showArea()

r1 = Rectangle(5, 4)
r1.calcArea()
r1.showArea()

t1 = Triangle(3, 4)
t1.calcArea()
t1.showArea()


7(b)..............................................................

class Employee:
    def __init__(self):
        self.name = ""
        self.empId = ""
        self.dept = ""
        self.salary = 0
    def getEmpDetails(self):
        self.name = input("Enter Employee name : ")
        self.empId = input("Enter Employee ID : ")
        self.dept = input("Enter Employee Dept : ")
        self.salary = int(input("Enter Employee Salary : "))

    def showEmpDetails(self):
        print("Employee Details")

        print("Name : ", self.name)
        print("ID : ", self.empId)
        print("Dept : ", self.dept)
        print("Salary : ", self.salary)

    def updtSalary(self):
        self.salary = int(input("Enter new Salary : "))

        print("Updated Salary", self.salary)
e1 = Employee()
e1.getEmpDetails()
e1.showEmpDetails()
e1.updtSalary()



8..................................................................
class PaliStr:
    def _init_(self):
        self.isPali = False

    def chkPalindrome(self, myStr):
        if myStr == myStr[::-1]:
            self.isPali = True
        else:
            self.isPali = False
        return self.isPali

class PaliInt(PaliStr):
    def _init_(self):
        self.isPali = False

    def chkPalindrome(self, val):
        temp = val
        rev = 0
        while temp != 0:
            dig = temp % 10
            rev = (rev*10) + dig
            temp = temp //10
        if val == rev:
            self.isPali = True
        else:
            self.isPali = False
        return self.isPali

st = input("Enter a string : ")

stObj = PaliStr()
if stObj.chkPalindrome(st):
    print("Given string is a Palindrome")
else:
    print("Given string is not a Palindrome")

val = int(input("Enter a integer : "))    

intObj = PaliInt()
if intObj.chkPalindrome(val):
    print("Given integer is a Palindrome")
else:
    print("Given integer is not a Palindrome")


9(A)........................................................................

import os
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin

# Create a directory to save the comics
SAVE_DIR = 'xkcd_comics'
os.makedirs(SAVE_DIR, exist_ok=True)

# URL of the XKCD archive page
XKCD_URL = 'https://xkcd.com/archive/'

# Send a GET request to the XKCD archive page
response = requests.get(XKCD_URL)
soup = BeautifulSoup(response.text, 'html.parser')

# Find all comic links
comic_links = soup.select('#middleContainer a')

# Download each comic
for link in comic_links:
    comic_url = urljoin(XKCD_URL, link['href'])
    comic_response = requests.get(comic_url)
    comic_soup = BeautifulSoup(comic_response.text, 'html.parser')
    
    # Find the comic image
    img_element = comic_soup.select('#comic img')
    if img_element:
        img_url = img_element[0]['src']
        img_url = urljoin(comic_url, img_url)
        
        # Get the image content
        img_response = requests.get(img_url)
        img_data = img_response.content
        
        # Save the image
        img_name = os.path.basename(img_url)
        img_path = os.path.join(SAVE_DIR, img_name)
        with open(img_path, 'wb') as img_file:
            img_file.write(img_data)
        
        print(f"Downloaded: {img_name}")

print("All XKCD comics downloaded successfully.")

9(B)..................................................................................

import openpyxl

def ReadFile(filename, sheet):
    filepath = f"D:\\{filename}.xlsx"
    data=[]
    try:
        wb = openpyxl.load_workbook(filepath)
        sh = wb[f'{sheet}']
        print(f"Displaying {sheet} from {filename}.xlsx:\n")
        for i in range(1, sh.max_row+1):
            for j in range(1, sh.max_column+1):
                cell = sh.cell(i,j).value
                data.append(cell)
        Prettify(data, sh.max_column)
    except openpyxl.utils.exceptions.InvalidFileException:
        print("File path does not exist!")
        exit(0)

def Prettify(data_lst, cols):
    if cols <= 0:
        print("Invalid max_columns value")
        return

    for i in range(0, len(data_lst), cols):
        for j in range(cols):
            idx = i + j
            if idx < len(data_lst):
                print(data_lst[idx], end="\t")
        print()

def WriteFile(filename):
    filepath = f"D:\\{filename}.xlsx"
    wb= openpyxl.Workbook()
    sh = input("Sheet title: ")
    wb['Sheet'].title = sh
    sheet = wb[sh]
    r = int(input("Number of rows: "))
    c = int(input("Number of coloums: "))
    for i in range(1, r+1):
        for j in range(1, c+1):
            data = input(f"Row {i}, Column {j} data value: ")
            sheet.cell(i, j, value=data)
    wb.save(filepath)
    print(f"{filename}.xlsx saved in directory!")

while True:
    print("\n---Operations---")
    print("1. Read a file\n2. Write into a file\n3. Exit")
    choice = int(input("Your choice: "))
    if choice == 1:
        filepath = input("File name/path: ")
        sheet = input("Sheet: ")
        ReadFile(filepath, sheet)

    elif choice == 2:
        filename = input("Filename: ")
        WriteFile(filename)

    elif choice == 3:
        break

    else:
        print("Invalid choice!")

10(A)....................................................................

from PyPDF2 import PdfWriter, PdfReader

num = int(input("Enter page number you want combine from multiple documents "))

pdf1 = open('C:\\Users\\tanis\Downloads\Tanishq.pdf', 'rb')
pdf2 = open('C:\\Users\\tanis\Downloads\Tanishq.pdf', 'rb')

pdf_writer = PdfWriter()

pdf1_reader = PdfReader(pdf1)
page = pdf1_reader.pages[num - 1]
pdf_writer.add_page(page)

pdf2_reader = PdfReader(pdf2)
page = pdf2_reader.pages[num - 1]
pdf_writer.add_page(page)

with open('C:\\Users\\tanis\Downloads\Tanisq.pdf', 'wb') as output:
    pdf_writer.write(output)

10(b)..................................................................

import json

# Load the JSON data from file
with open('weather_data.json') as f:
    data = json.load(f)

# Extract the required weather data
current_temp = data['main']['temp']
humidity = data['main']['humidity']
weather_desc = data['weather'][0]['description']

# Display the weather data
print(f"Current temperature: {current_temp}°C")
print(f"Humidity: {humidity}%")
print(f"Weather description: {weather_desc}")



{
  "main": {
    "temp": 298.48,
    "humidity": 64
  },
  "weather": [
    {
      "description": "moderate rain"
    }
  ]
}



